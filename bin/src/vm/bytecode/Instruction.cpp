// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_vm_bytecode_Instruction
#include <vm/bytecode/Instruction.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b441db3c8655d481_29_new,"vm.bytecode.Instruction","new",0x530b85be,"vm.bytecode.Instruction.new","vm/bytecode/Instruction.hx",29,0x588d7b52)
HX_LOCAL_STACK_FRAME(_hx_pos_b441db3c8655d481_40_boot,"vm.bytecode.Instruction","boot",0x4f228114,"vm.bytecode.Instruction.boot","vm/bytecode/Instruction.hx",40,0x588d7b52)
namespace vm{
namespace bytecode{

void Instruction_obj::__construct(::String name, ::Dynamic nargs){
            	HX_STACKFRAME(&_hx_pos_b441db3c8655d481_29_new)
HXLINE(  31)		this->n = (int)0;
HXLINE(  33)		this->n = nargs;
HXLINE(  34)		this->name = name;
            	}

Dynamic Instruction_obj::__CreateEmpty() { return new Instruction_obj; }

void *Instruction_obj::_hx_vtable = 0;

Dynamic Instruction_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Instruction_obj > _hx_result = new Instruction_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Instruction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x558e56c2;
}

::Array< ::Dynamic> Instruction_obj::instructions;


Instruction_obj::Instruction_obj()
{
}

void Instruction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Instruction);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_END_CLASS();
}

void Instruction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(n,"n");
}

hx::Val Instruction_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Instruction_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"instructions") ) { outValue = ( instructions ); return true; }
	}
	return false;
}

hx::Val Instruction_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Instruction_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"instructions") ) { instructions=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Instruction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("n","\x6e","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Instruction_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Instruction_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Instruction_obj,n),HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Instruction_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Instruction_obj::instructions,HX_HCSTRING("instructions","\xa5","\x96","\x3f","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Instruction_obj_sMemberFields[] = {
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	::String(null()) };

static void Instruction_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Instruction_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Instruction_obj::instructions,"instructions");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Instruction_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Instruction_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Instruction_obj::instructions,"instructions");
};

#endif

hx::Class Instruction_obj::__mClass;

static ::String Instruction_obj_sStaticFields[] = {
	HX_HCSTRING("instructions","\xa5","\x96","\x3f","\x6d"),
	::String(null())
};

void Instruction_obj::__register()
{
	hx::Object *dummy = new Instruction_obj;
	Instruction_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("vm.bytecode.Instruction","\xcc","\x8e","\x32","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Instruction_obj::__GetStatic;
	__mClass->mSetStaticField = &Instruction_obj::__SetStatic;
	__mClass->mMarkFunc = Instruction_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Instruction_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Instruction_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Instruction_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Instruction_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Instruction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Instruction_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Instruction_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_b441db3c8655d481_40_boot)
HXLINE(  42)			 ::vm::bytecode::Instruction _hx_tmp =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("iadd",58,59,b1,45),null());
HXLINE(  43)			 ::vm::bytecode::Instruction _hx_tmp1 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("isub",b7,10,bf,45),null());
HXLINE(  44)			 ::vm::bytecode::Instruction _hx_tmp2 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("imul",3b,83,ba,45),null());
HXLINE(  45)			 ::vm::bytecode::Instruction _hx_tmp3 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("ilt",31,0b,50,00),null());
HXLINE(  46)			 ::vm::bytecode::Instruction _hx_tmp4 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("ieq",15,05,50,00),null());
HXLINE(  47)			 ::vm::bytecode::Instruction _hx_tmp5 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("br",d0,55,00,00),(int)1);
HXLINE(  48)			 ::vm::bytecode::Instruction _hx_tmp6 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("brt",a4,c0,4a,00),(int)1);
HXLINE(  49)			 ::vm::bytecode::Instruction _hx_tmp7 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("brf",96,c0,4a,00),(int)1);
HXLINE(  50)			 ::vm::bytecode::Instruction _hx_tmp8 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("iconst",5a,dc,d6,45),(int)1);
HXLINE(  51)			 ::vm::bytecode::Instruction _hx_tmp9 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("load",26,9a,b7,47),(int)1);
HXLINE(  52)			 ::vm::bytecode::Instruction _hx_tmp10 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("gload",0d,5a,fd,95),(int)1);
HXLINE(  53)			 ::vm::bytecode::Instruction _hx_tmp11 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("store",e1,13,16,84),(int)1);
HXLINE(  54)			 ::vm::bytecode::Instruction _hx_tmp12 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("gstore",1a,3e,d8,b2),(int)1);
HXLINE(  55)			 ::vm::bytecode::Instruction _hx_tmp13 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("print",2d,58,8b,c8),null());
HXLINE(  56)			 ::vm::bytecode::Instruction _hx_tmp14 =  ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("pop",91,5d,55,00),null());
HXLINE(  40)			return ::Array_obj< ::Dynamic>::__new(17)->init(0,null())->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3,_hx_tmp2)->init(4,_hx_tmp3)->init(5,_hx_tmp4)->init(6,_hx_tmp5)->init(7,_hx_tmp6)->init(8,_hx_tmp7)->init(9,_hx_tmp8)->init(10,_hx_tmp9)->init(11,_hx_tmp10)->init(12,_hx_tmp11)->init(13,_hx_tmp12)->init(14,_hx_tmp13)->init(15,_hx_tmp14)->init(16, ::vm::bytecode::Instruction_obj::__alloc( HX_CTX ,HX_("halt",c1,29,08,45),null()));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_b441db3c8655d481_40_boot)
HXDLIN(  40)		instructions =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace vm
} // end namespace bytecode
