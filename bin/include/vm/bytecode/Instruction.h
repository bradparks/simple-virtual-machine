// Generated by Haxe 3.4.7
#ifndef INCLUDED_vm_bytecode_Instruction
#define INCLUDED_vm_bytecode_Instruction

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b441db3c8655d481_29_new)
HX_DECLARE_CLASS2(vm,bytecode,Instruction)

namespace vm{
namespace bytecode{


class HXCPP_CLASS_ATTRIBUTES Instruction_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Instruction_obj OBJ_;
		Instruction_obj();

	public:
		enum { _hx_ClassId = 0x558e56c2 };

		void __construct(::String name, ::Dynamic nargs);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vm.bytecode.Instruction")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"vm.bytecode.Instruction"); }

		hx::ObjectPtr< Instruction_obj > __new(::String name, ::Dynamic nargs) {
			hx::ObjectPtr< Instruction_obj > __this = new Instruction_obj();
			__this->__construct(name,nargs);
			return __this;
		}

		static hx::ObjectPtr< Instruction_obj > __alloc(hx::Ctx *_hx_ctx,::String name, ::Dynamic nargs) {
			Instruction_obj *__this = (Instruction_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Instruction_obj), true, "vm.bytecode.Instruction"));
			*(void **)__this = Instruction_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b441db3c8655d481_29_new)
HXLINE(  31)		( ( ::vm::bytecode::Instruction)(__this) )->n = (int)0;
HXLINE(  33)		( ( ::vm::bytecode::Instruction)(__this) )->n = nargs;
HXLINE(  34)		( ( ::vm::bytecode::Instruction)(__this) )->name = name;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Instruction_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Instruction","\xee","\x4d","\xb2","\xa6"); }

		static void __boot();
		static ::Array< ::Dynamic> instructions;
		::String name;
		int n;
};

} // end namespace vm
} // end namespace bytecode

#endif /* INCLUDED_vm_bytecode_Instruction */ 
