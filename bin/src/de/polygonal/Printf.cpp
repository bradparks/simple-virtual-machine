// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_38344beec7696400
#define INCLUDED_38344beec7696400
#include "cpp/Int64.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FloatType
#include <de/polygonal/_Printf/FloatType.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FormatDataType
#include <de/polygonal/_Printf/FormatDataType.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FormatFlags
#include <de/polygonal/_Printf/FormatFlags.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_FormatToken
#include <de/polygonal/_Printf/FormatToken.h>
#endif
#ifndef INCLUDED_de_polygonal__Printf_IntegerType
#include <de/polygonal/_Printf/IntegerType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_62_init,"de.polygonal.Printf","init",0x8a4a852f,"de.polygonal.Printf.init","de/polygonal/Printf.hx",62,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_108_makeDataTypeMap,"de.polygonal.Printf","makeDataTypeMap",0x2d5e2feb,"de.polygonal.Printf.makeDataTypeMap","de/polygonal/Printf.hx",108,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_549_format,"de.polygonal.Printf","format",0xfc1bdf16,"de.polygonal.Printf.format","de/polygonal/Printf.hx",549,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_610_tokenize,"de.polygonal.Printf","tokenize",0xe3c03b9a,"de.polygonal.Printf.tokenize","de/polygonal/Printf.hx",610,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_800_formatBinary,"de.polygonal.Printf","formatBinary",0x694583b7,"de.polygonal.Printf.formatBinary","de/polygonal/Printf.hx",800,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_839_formatOctal,"de.polygonal.Printf","formatOctal",0x61c5fed5,"de.polygonal.Printf.formatOctal","de/polygonal/Printf.hx",839,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_867_formatHexadecimal,"de.polygonal.Printf","formatHexadecimal",0x0abf8cb5,"de.polygonal.Printf.formatHexadecimal","de/polygonal/Printf.hx",867,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_899_formatUnsignedDecimal,"de.polygonal.Printf","formatUnsignedDecimal",0x15d145a6,"de.polygonal.Printf.formatUnsignedDecimal","de/polygonal/Printf.hx",899,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_918_formatNaturalFloat,"de.polygonal.Printf","formatNaturalFloat",0x498e7f29,"de.polygonal.Printf.formatNaturalFloat","de/polygonal/Printf.hx",918,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_939_formatScientific,"de.polygonal.Printf","formatScientific",0xf3011c5f,"de.polygonal.Printf.formatScientific","de/polygonal/Printf.hx",939,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_986_formatSignedDecimal,"de.polygonal.Printf","formatSignedDecimal",0x590b191f,"de.polygonal.Printf.formatSignedDecimal","de/polygonal/Printf.hx",986,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1029_formatString,"de.polygonal.Printf","formatString",0x8d69f087,"de.polygonal.Printf.formatString","de/polygonal/Printf.hx",1029,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1050_formatNormalFloat,"de.polygonal.Printf","formatNormalFloat",0xeeb11a7f,"de.polygonal.Printf.formatNormalFloat","de/polygonal/Printf.hx",1050,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1111_formatCharacter,"de.polygonal.Printf","formatCharacter",0x70fb49b3,"de.polygonal.Printf.formatCharacter","de/polygonal/Printf.hx",1111,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1126_padNumber,"de.polygonal.Printf","padNumber",0xad0131fd,"de.polygonal.Printf.padNumber","de/polygonal/Printf.hx",1126,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1154_lpad,"de.polygonal.Printf","lpad",0x8c47a686,"de.polygonal.Printf.lpad","de/polygonal/Printf.hx",1154,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1161_rpad,"de.polygonal.Printf","rpad",0x903eee40,"de.polygonal.Printf.rpad","de/polygonal/Printf.hx",1161,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1168_toHex,"de.polygonal.Printf","toHex",0xcce28521,"de.polygonal.Printf.toHex","de/polygonal/Printf.hx",1168,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1187_toOct,"de.polygonal.Printf","toOct",0xcce7d326,"de.polygonal.Printf.toOct","de/polygonal/Printf.hx",1187,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1199_iabs,"de.polygonal.Printf","iabs",0x8a40a1c8,"de.polygonal.Printf.iabs","de/polygonal/Printf.hx",1199,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1201_str,"de.polygonal.Printf","str",0xe3f34772,"de.polygonal.Printf.str","de/polygonal/Printf.hx",1201,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1203_codeAt,"de.polygonal.Printf","codeAt",0xbfc29f5f,"de.polygonal.Printf.codeAt","de/polygonal/Printf.hx",1203,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1205_isDigit,"de.polygonal.Printf","isDigit",0x336624a4,"de.polygonal.Printf.isDigit","de/polygonal/Printf.hx",1205,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_1208_roundTo,"de.polygonal.Printf","roundTo",0x4a2804aa,"de.polygonal.Printf.roundTo","de/polygonal/Printf.hx",1208,0x0b01abed)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0f0255b116184c_59_boot,"de.polygonal.Printf","boot",0x85aace51,"de.polygonal.Printf.boot","de/polygonal/Printf.hx",59,0x0b01abed)
namespace de{
namespace polygonal{

void Printf_obj::__construct() { }

Dynamic Printf_obj::__CreateEmpty() { return new Printf_obj; }

void *Printf_obj::_hx_vtable = 0;

Dynamic Printf_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Printf_obj > _hx_result = new Printf_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Printf_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x64d01cd9;
}

 ::haxe::ds::IntMap Printf_obj::dataTypeMap;

 ::haxe::ds::IntMap Printf_obj::formatIntFuncHash;

 ::haxe::ds::IntMap Printf_obj::formatFloatFuncHash;

 ::haxe::ds::IntMap Printf_obj::formatStringFuncHash;

bool Printf_obj::_initialized;

void Printf_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_fd0f0255b116184c_62_init)
HXLINE(  63)		::de::polygonal::Printf_obj::dataTypeMap = ::de::polygonal::Printf_obj::makeDataTypeMap();
HXLINE(  65)		::de::polygonal::Printf_obj::formatIntFuncHash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  66)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)1,::de::polygonal::Printf_obj::formatSignedDecimal_dyn());
HXLINE(  67)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)2,::de::polygonal::Printf_obj::formatUnsignedDecimal_dyn());
HXLINE(  68)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)0,::de::polygonal::Printf_obj::formatCharacter_dyn());
HXLINE(  69)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)4,::de::polygonal::Printf_obj::formatHexadecimal_dyn());
HXLINE(  70)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)3,::de::polygonal::Printf_obj::formatOctal_dyn());
HXLINE(  71)		::de::polygonal::Printf_obj::formatIntFuncHash->set((int)5,::de::polygonal::Printf_obj::formatBinary_dyn());
HXLINE(  73)		::de::polygonal::Printf_obj::formatFloatFuncHash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  74)		::de::polygonal::Printf_obj::formatFloatFuncHash->set((int)0,::de::polygonal::Printf_obj::formatNormalFloat_dyn());
HXLINE(  75)		::de::polygonal::Printf_obj::formatFloatFuncHash->set((int)1,::de::polygonal::Printf_obj::formatScientific_dyn());
HXLINE(  76)		::de::polygonal::Printf_obj::formatFloatFuncHash->set((int)2,::de::polygonal::Printf_obj::formatNaturalFloat_dyn());
HXLINE(  78)		::de::polygonal::Printf_obj::formatStringFuncHash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  79)		::de::polygonal::Printf_obj::formatStringFuncHash->set((int)2,::de::polygonal::Printf_obj::formatString_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Printf_obj,init,(void))

 ::haxe::ds::IntMap Printf_obj::makeDataTypeMap(){
            	HX_GC_STACKFRAME(&_hx_pos_fd0f0255b116184c_108_makeDataTypeMap)
HXLINE( 109)		 ::haxe::ds::IntMap hash =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 110)		hash->set((int)105,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::ISignedDecimal_dyn()));
HXLINE( 111)		hash->set((int)100,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::ISignedDecimal_dyn()));
HXLINE( 112)		hash->set((int)117,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IUnsignedDecimal_dyn()));
HXLINE( 113)		hash->set((int)99,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::ICharacter_dyn()));
HXLINE( 114)		hash->set((int)120,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IHex_dyn()));
HXLINE( 115)		hash->set((int)88,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IHex_dyn()));
HXLINE( 116)		hash->set((int)111,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IOctal_dyn()));
HXLINE( 117)		hash->set((int)98,::de::polygonal::_Printf::FormatDataType_obj::FmtInteger(::de::polygonal::_Printf::IntegerType_obj::IBin_dyn()));
HXLINE( 119)		hash->set((int)102,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FNormal_dyn()));
HXLINE( 120)		hash->set((int)101,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FScientific_dyn()));
HXLINE( 121)		hash->set((int)69,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FScientific_dyn()));
HXLINE( 122)		hash->set((int)103,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FNatural_dyn()));
HXLINE( 123)		hash->set((int)71,::de::polygonal::_Printf::FormatDataType_obj::FmtFloat(::de::polygonal::_Printf::FloatType_obj::FNatural_dyn()));
HXLINE( 125)		hash->set((int)115,::de::polygonal::_Printf::FormatDataType_obj::FmtString_dyn());
HXLINE( 127)		hash->set((int)112,::de::polygonal::_Printf::FormatDataType_obj::FmtPointer_dyn());
HXLINE( 128)		hash->set((int)110,::de::polygonal::_Printf::FormatDataType_obj::FmtNothing_dyn());
HXLINE( 130)		return hash;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Printf_obj,makeDataTypeMap,return )

::String Printf_obj::format(::String fmt,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_549_format)
HXLINE( 550)		if (!(::de::polygonal::Printf_obj::_initialized)) {
HXLINE( 552)			::de::polygonal::Printf_obj::_initialized = true;
HXLINE( 553)			::de::polygonal::Printf_obj::init();
            		}
HXLINE( 556)		{
HXLINE( 556)			int _g1 = (int)0;
HXDLIN( 556)			int _g = args->get_length();
HXDLIN( 556)			while((_g1 < _g)){
HXLINE( 556)				_g1 = (_g1 + (int)1);
HXDLIN( 556)				int i = (_g1 - (int)1);
HXLINE( 557)				if (hx::IsNull( args->__get(i) )) {
HXLINE( 558)					args->set(i,HX_("null",87,9e,0e,49));
            				}
            			}
            		}
HXLINE( 560)		::String output = HX_("",00,00,00,00);
HXLINE( 561)		int argIndex = (int)0;
HXLINE( 562)		::Array< ::Dynamic> tokens = ::de::polygonal::Printf_obj::tokenize(fmt);
HXLINE( 563)		{
HXLINE( 563)			int _g2 = (int)0;
HXDLIN( 563)			while((_g2 < tokens->length)){
HXLINE( 563)				 ::de::polygonal::_Printf::FormatToken token = tokens->__get(_g2).StaticCast<  ::de::polygonal::_Printf::FormatToken >();
HXDLIN( 563)				_g2 = (_g2 + (int)1);
HXLINE( 565)				switch((int)(_hx_getEnumValueIndex(token))){
            					case (int)0: {
HXLINE( 570)						::String str = token->_hx_getString(0);
HXLINE( 571)						output = (output + str);
            					}
            					break;
            					case (int)1: {
HXLINE( 578)						 ::Dynamic tagArgs = token->_hx_getObject(1);
HXDLIN( 578)						 ::de::polygonal::_Printf::FormatDataType type = token->_hx_getObject(0).StaticCast<  ::de::polygonal::_Printf::FormatDataType >();
HXDLIN( 578)						{
HXLINE( 579)							 ::Dynamic _hx_tmp;
HXDLIN( 579)							if (hx::IsNotNull( tagArgs->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) )) {
HXLINE( 579)								_hx_tmp = tagArgs->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
            							}
            							else {
HXLINE( 579)								argIndex = (argIndex + (int)1);
HXDLIN( 579)								_hx_tmp = args->__get((argIndex - (int)1));
            							}
HXDLIN( 579)							tagArgs->__SetField(HX_("width",06,b6,62,ca),_hx_tmp,hx::paccDynamic);
HXLINE( 580)							 ::Dynamic _hx_tmp1;
HXDLIN( 580)							if (hx::IsNotNull( tagArgs->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic) )) {
HXLINE( 580)								_hx_tmp1 = tagArgs->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
            							}
            							else {
HXLINE( 580)								argIndex = (argIndex + (int)1);
HXDLIN( 580)								_hx_tmp1 = args->__get((argIndex - (int)1));
            							}
HXDLIN( 580)							tagArgs->__SetField(HX_("precision",3e,d5,c7,80),_hx_tmp1,hx::paccDynamic);
HXLINE( 581)							argIndex = (argIndex + (int)1);
HXDLIN( 581)							 ::Dynamic value = args->__get((argIndex - (int)1));
HXLINE( 583)							 ::Dynamic formatFunction;
HXLINE( 585)							switch((int)(_hx_getEnumValueIndex(type))){
            								case (int)0: {
HXLINE( 590)									 ::de::polygonal::_Printf::IntegerType integerType = type->_hx_getObject(0).StaticCast<  ::de::polygonal::_Printf::IntegerType >();
HXLINE( 591)									 ::haxe::ds::IntMap formatFunction1 = ::de::polygonal::Printf_obj::formatIntFuncHash;
HXDLIN( 591)									formatFunction = formatFunction1->get(_hx_getEnumValueIndex(integerType));
            								}
            								break;
            								case (int)1: {
HXLINE( 587)									 ::de::polygonal::_Printf::FloatType floatType = type->_hx_getObject(0).StaticCast<  ::de::polygonal::_Printf::FloatType >();
HXLINE( 588)									 ::haxe::ds::IntMap formatFunction2 = ::de::polygonal::Printf_obj::formatFloatFuncHash;
HXDLIN( 588)									formatFunction = formatFunction2->get(_hx_getEnumValueIndex(floatType));
            								}
            								break;
            								case (int)2: {
HXLINE( 594)									formatFunction = ::de::polygonal::Printf_obj::formatStringFuncHash->get((int)2);
            								}
            								break;
            								case (int)3: {
HXLINE( 597)									HX_STACK_DO_THROW(HX_("specifier 'p' is not supported",0f,c9,75,12));
            								}
            								break;
            								case (int)4: {
HXLINE( 600)									HX_STACK_DO_THROW(HX_("specifier 'n' is not supported",8d,a0,5b,08));
            								}
            								break;
            							}
HXLINE( 603)							output = (output + ( (::String)(formatFunction(value,tagArgs)) ));
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 573)						::String name = token->_hx_getString(0);
HXDLIN( 573)						{
HXLINE( 574)							if (!(::Reflect_obj::hasField(args->__get((int)0),name))) {
HXLINE( 575)								HX_STACK_DO_THROW((HX_("no field named ",2c,5c,eb,b5) + name));
            							}
HXLINE( 576)							output = (output + ::Std_obj::string(::Reflect_obj::field(args->__get((int)0),name)));
            						}
            					}
            					break;
            					case (int)3: {
HXLINE( 568)						HX_STACK_DO_THROW(HX_("invalid format specifier",5e,52,d7,0b));
            					}
            					break;
            				}
            			}
            		}
HXLINE( 606)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,format,return )

::Array< ::Dynamic> Printf_obj::tokenize(::String fmt){
            	HX_GC_STACKFRAME(&_hx_pos_fd0f0255b116184c_610_tokenize)
HXLINE( 611)		int length = fmt.length;
HXLINE( 612)		 ::StringBuf lastStr =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 613)		int i = (int)0;
HXLINE( 614)		int c = (int)0;
HXLINE( 615)		::Array< ::Dynamic> tokens = ::Array_obj< ::Dynamic>::__new();
HXLINE( 616)		while((i < length)){
HXLINE( 618)			i = (i + (int)1);
HXDLIN( 618)			int c1 = fmt.cca((i - (int)1));
HXLINE( 619)			if ((c1 == (int)37)) {
HXLINE( 621)				i = (i + (int)1);
HXDLIN( 621)				c1 = fmt.cca((i - (int)1));
HXLINE( 622)				if ((c1 == (int)37)) {
HXLINE( 623)					if (hx::IsNull( lastStr->charBuf )) {
HXLINE( 623)						lastStr->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 623)					lastStr->charBuf->push(c1);
            				}
            				else {
HXLINE( 627)					if ((lastStr->toString().length > (int)0)) {
HXLINE( 629)						tokens->push(::de::polygonal::_Printf::FormatToken_obj::BareString(lastStr->toString()));
HXLINE( 630)						lastStr =  ::StringBuf_obj::__alloc( HX_CTX );
            					}
HXLINE( 634)					 ::de::polygonal::_Printf::FormatToken token;
HXLINE( 637)					if ((c1 == (int)40)) {
HXLINE( 639)						int endPos = fmt.indexOf(HX_(")",29,00,00,00),i);
HXLINE( 640)						if ((endPos == (int)-1)) {
HXLINE( 641)							token = ::de::polygonal::_Printf::FormatToken_obj::Unknown(HX_("named param",e6,ac,9d,64),i);
            						}
            						else {
HXLINE( 644)							::String paramName = fmt.substr(i,(endPos - i));
HXLINE( 645)							i = (endPos + (int)1);
HXLINE( 646)							token = ::de::polygonal::_Printf::FormatToken_obj::Property(paramName);
            						}
            					}
            					else {
HXLINE( 652)						int this1 = (int)0;
HXDLIN( 652)						 ::Dynamic params =  ::Dynamic(hx::Anon_obj::Create(4)
            							->setFixed(0,HX_("precision",3e,d5,c7,80),(int)-1)
            							->setFixed(1,HX_("width",06,b6,62,ca),(int)-1)
            							->setFixed(2,HX_("pos",94,5d,55,00),(int)-1)
            							->setFixed(3,HX_("flags",47,2b,8c,02),this1));
HXLINE( 655)						while(true){
HXLINE( 655)							bool _hx_tmp;
HXDLIN( 655)							bool _hx_tmp1;
HXDLIN( 655)							bool _hx_tmp2;
HXDLIN( 655)							bool _hx_tmp3;
HXDLIN( 655)							if ((c1 != (int)45)) {
HXLINE( 655)								_hx_tmp3 = (c1 == (int)43);
            							}
            							else {
HXLINE( 655)								_hx_tmp3 = true;
            							}
HXDLIN( 655)							if (!(_hx_tmp3)) {
HXLINE( 655)								_hx_tmp2 = (c1 == (int)35);
            							}
            							else {
HXLINE( 655)								_hx_tmp2 = true;
            							}
HXDLIN( 655)							if (!(_hx_tmp2)) {
HXLINE( 655)								_hx_tmp1 = (c1 == (int)48);
            							}
            							else {
HXLINE( 655)								_hx_tmp1 = true;
            							}
HXDLIN( 655)							if (!(_hx_tmp1)) {
HXLINE( 655)								_hx_tmp = (c1 == (int)32);
            							}
            							else {
HXLINE( 655)								_hx_tmp = true;
            							}
HXDLIN( 655)							if (!(_hx_tmp)) {
HXLINE( 655)								goto _hx_goto_6;
            							}
HXLINE( 657)							if ((c1 == (int)45)) {
HXLINE( 658)								 ::Dynamic params1 = params;
HXDLIN( 658)								int params2 = ( (int)(params1->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 658)								params1->__SetField(HX_("flags",47,2b,8c,02),((int)params2 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))),hx::paccDynamic);
            							}
            							else {
HXLINE( 660)								if ((c1 == (int)43)) {
HXLINE( 661)									 ::Dynamic params3 = params;
HXDLIN( 661)									int params4 = ( (int)(params3->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 661)									params3->__SetField(HX_("flags",47,2b,8c,02),((int)params4 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))),hx::paccDynamic);
            								}
            								else {
HXLINE( 663)									if ((c1 == (int)35)) {
HXLINE( 664)										 ::Dynamic params5 = params;
HXDLIN( 664)										int params6 = ( (int)(params5->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 664)										params5->__SetField(HX_("flags",47,2b,8c,02),((int)params6 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))),hx::paccDynamic);
            									}
            									else {
HXLINE( 666)										if ((c1 == (int)48)) {
HXLINE( 667)											 ::Dynamic params7 = params;
HXDLIN( 667)											int params8 = ( (int)(params7->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 667)											params7->__SetField(HX_("flags",47,2b,8c,02),((int)params8 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))),hx::paccDynamic);
            										}
            										else {
HXLINE( 669)											if ((c1 == (int)32)) {
HXLINE( 670)												 ::Dynamic params9 = params;
HXDLIN( 670)												int params10 = ( (int)(params9->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 670)												params9->__SetField(HX_("flags",47,2b,8c,02),((int)params10 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn()))),hx::paccDynamic);
            											}
            										}
            									}
            								}
            							}
HXLINE( 672)							i = (i + (int)1);
HXDLIN( 672)							c1 = fmt.cca((i - (int)1));
            						}
            						_hx_goto_6:;
HXLINE( 677)						bool _hx_tmp4;
HXDLIN( 677)						int this2 = ( (int)(params->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 677)						if ((((int)this2 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 677)							int this3 = ( (int)(params->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 677)							_hx_tmp4 = (((int)this3 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0);
            						}
            						else {
HXLINE( 677)							_hx_tmp4 = false;
            						}
HXDLIN( 677)						if (_hx_tmp4) {
HXLINE( 682)							 ::Dynamic params11 = params;
HXDLIN( 682)							int params12 = ( (int)(params11->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 682)							params11->__SetField(HX_("flags",47,2b,8c,02),((int)params12 & (int)((int)-1 - ((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn())))),hx::paccDynamic);
            						}
HXLINE( 684)						bool _hx_tmp5;
HXDLIN( 684)						int this4 = ( (int)(params->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 684)						if ((((int)this4 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn()))) != (int)0)) {
HXLINE( 684)							int this5 = ( (int)(params->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 684)							_hx_tmp5 = (((int)this5 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0);
            						}
            						else {
HXLINE( 684)							_hx_tmp5 = false;
            						}
HXDLIN( 684)						if (_hx_tmp5) {
HXLINE( 689)							 ::Dynamic params13 = params;
HXDLIN( 689)							int params14 = ( (int)(params13->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 689)							params13->__SetField(HX_("flags",47,2b,8c,02),((int)params14 & (int)((int)-1 - ((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn())))),hx::paccDynamic);
            						}
HXLINE( 694)						if ((c1 == (int)42)) {
HXLINE( 696)							params->__SetField(HX_("width",06,b6,62,ca),null(),hx::paccDynamic);
HXLINE( 697)							i = (i + (int)1);
HXDLIN( 697)							c1 = fmt.cca((i - (int)1));
            						}
            						else {
HXLINE( 700)							bool _hx_tmp6;
HXDLIN( 700)							if ((c1 >= (int)48)) {
HXLINE( 700)								_hx_tmp6 = (c1 <= (int)57);
            							}
            							else {
HXLINE( 700)								_hx_tmp6 = false;
            							}
HXDLIN( 700)							if (_hx_tmp6) {
HXLINE( 702)								params->__SetField(HX_("width",06,b6,62,ca),(int)0,hx::paccDynamic);
HXLINE( 703)								while(true){
HXLINE( 703)									bool _hx_tmp7;
HXDLIN( 703)									if ((c1 >= (int)48)) {
HXLINE( 703)										_hx_tmp7 = (c1 <= (int)57);
            									}
            									else {
HXLINE( 703)										_hx_tmp7 = false;
            									}
HXDLIN( 703)									if (!(_hx_tmp7)) {
HXLINE( 703)										goto _hx_goto_7;
            									}
HXLINE( 705)									params->__SetField(HX_("width",06,b6,62,ca),((c1 - (int)48) + (params->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) * (int)10)),hx::paccDynamic);
HXLINE( 706)									i = (i + (int)1);
HXDLIN( 706)									c1 = fmt.cca((i - (int)1));
            								}
            								_hx_goto_7:;
HXLINE( 710)								if ((c1 == (int)36)) {
HXLINE( 712)									params->__SetField(HX_("pos",94,5d,55,00),(params->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) - (int)1),hx::paccDynamic);
HXLINE( 713)									params->__SetField(HX_("width",06,b6,62,ca),(int)-1,hx::paccDynamic);
HXLINE( 714)									i = (i + (int)1);
HXDLIN( 714)									c1 = fmt.cca((i - (int)1));
HXLINE( 716)									if ((c1 == (int)42)) {
HXLINE( 718)										params->__SetField(HX_("width",06,b6,62,ca),null(),hx::paccDynamic);
HXLINE( 719)										i = (i + (int)1);
HXDLIN( 719)										c1 = fmt.cca((i - (int)1));
            									}
            									else {
HXLINE( 721)										bool _hx_tmp8;
HXDLIN( 721)										if ((c1 >= (int)48)) {
HXLINE( 721)											_hx_tmp8 = (c1 <= (int)57);
            										}
            										else {
HXLINE( 721)											_hx_tmp8 = false;
            										}
HXDLIN( 721)										if (_hx_tmp8) {
HXLINE( 723)											params->__SetField(HX_("width",06,b6,62,ca),(int)0,hx::paccDynamic);
HXLINE( 724)											while(true){
HXLINE( 724)												bool _hx_tmp9;
HXDLIN( 724)												if ((c1 >= (int)48)) {
HXLINE( 724)													_hx_tmp9 = (c1 <= (int)57);
            												}
            												else {
HXLINE( 724)													_hx_tmp9 = false;
            												}
HXDLIN( 724)												if (!(_hx_tmp9)) {
HXLINE( 724)													goto _hx_goto_8;
            												}
HXLINE( 726)												params->__SetField(HX_("width",06,b6,62,ca),((c1 - (int)48) + (params->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic) * (int)10)),hx::paccDynamic);
HXLINE( 727)												i = (i + (int)1);
HXDLIN( 727)												c1 = fmt.cca((i - (int)1));
            											}
            											_hx_goto_8:;
            										}
            									}
            								}
            							}
            						}
HXLINE( 735)						if ((c1 == (int)46)) {
HXLINE( 737)							i = (i + (int)1);
HXDLIN( 737)							c1 = fmt.cca((i - (int)1));
HXLINE( 738)							if ((c1 == (int)42)) {
HXLINE( 740)								params->__SetField(HX_("precision",3e,d5,c7,80),null(),hx::paccDynamic);
HXLINE( 741)								i = (i + (int)1);
HXDLIN( 741)								c1 = fmt.cca((i - (int)1));
            							}
            							else {
HXLINE( 744)								bool _hx_tmp10;
HXDLIN( 744)								if ((c1 >= (int)48)) {
HXLINE( 744)									_hx_tmp10 = (c1 <= (int)57);
            								}
            								else {
HXLINE( 744)									_hx_tmp10 = false;
            								}
HXDLIN( 744)								if (_hx_tmp10) {
HXLINE( 746)									params->__SetField(HX_("precision",3e,d5,c7,80),(int)0,hx::paccDynamic);
HXLINE( 747)									while(true){
HXLINE( 747)										bool _hx_tmp11;
HXDLIN( 747)										if ((c1 >= (int)48)) {
HXLINE( 747)											_hx_tmp11 = (c1 <= (int)57);
            										}
            										else {
HXLINE( 747)											_hx_tmp11 = false;
            										}
HXDLIN( 747)										if (!(_hx_tmp11)) {
HXLINE( 747)											goto _hx_goto_9;
            										}
HXLINE( 749)										params->__SetField(HX_("precision",3e,d5,c7,80),((c1 - (int)48) + (params->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic) * (int)10)),hx::paccDynamic);
HXLINE( 750)										i = (i + (int)1);
HXDLIN( 750)										c1 = fmt.cca((i - (int)1));
            									}
            									_hx_goto_9:;
            								}
            								else {
HXLINE( 754)									params->__SetField(HX_("precision",3e,d5,c7,80),(int)0,hx::paccDynamic);
            								}
            							}
            						}
HXLINE( 759)						while(true){
HXLINE( 759)							bool _hx_tmp12;
HXDLIN( 759)							bool _hx_tmp13;
HXDLIN( 759)							if ((c1 != (int)104)) {
HXLINE( 759)								_hx_tmp13 = (c1 == (int)108);
            							}
            							else {
HXLINE( 759)								_hx_tmp13 = true;
            							}
HXDLIN( 759)							if (!(_hx_tmp13)) {
HXLINE( 759)								_hx_tmp12 = (c1 == (int)76);
            							}
            							else {
HXLINE( 759)								_hx_tmp12 = true;
            							}
HXDLIN( 759)							if (!(_hx_tmp12)) {
HXLINE( 759)								goto _hx_goto_10;
            							}
HXLINE( 761)							switch((int)(c1)){
            								case (int)76: {
HXLINE( 768)									 ::Dynamic params15 = params;
HXDLIN( 768)									int params16 = ( (int)(params15->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 768)									params15->__SetField(HX_("flags",47,2b,8c,02),((int)params16 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthL_dyn()))),hx::paccDynamic);
            								}
            								break;
            								case (int)104: {
HXLINE( 764)									 ::Dynamic params17 = params;
HXDLIN( 764)									int params18 = ( (int)(params17->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 764)									params17->__SetField(HX_("flags",47,2b,8c,02),((int)params18 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))),hx::paccDynamic);
            								}
            								break;
            								case (int)108: {
HXLINE( 766)									 ::Dynamic params19 = params;
HXDLIN( 766)									int params20 = ( (int)(params19->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 766)									params19->__SetField(HX_("flags",47,2b,8c,02),((int)params20 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Lengthl_dyn()))),hx::paccDynamic);
            								}
            								break;
            							}
HXLINE( 770)							i = (i + (int)1);
HXDLIN( 770)							c1 = fmt.cca((i - (int)1));
            						}
            						_hx_goto_10:;
HXLINE( 775)						bool _hx_tmp14;
HXDLIN( 775)						bool _hx_tmp15;
HXDLIN( 775)						if ((c1 != (int)69)) {
HXLINE( 775)							_hx_tmp15 = (c1 == (int)71);
            						}
            						else {
HXLINE( 775)							_hx_tmp15 = true;
            						}
HXDLIN( 775)						if (!(_hx_tmp15)) {
HXLINE( 775)							_hx_tmp14 = (c1 == (int)88);
            						}
            						else {
HXLINE( 775)							_hx_tmp14 = true;
            						}
HXDLIN( 775)						if (_hx_tmp14) {
HXLINE( 776)							 ::Dynamic params21 = params;
HXDLIN( 776)							int params22 = ( (int)(params21->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 776)							params21->__SetField(HX_("flags",47,2b,8c,02),((int)params22 | (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::UpperCase_dyn()))),hx::paccDynamic);
            						}
HXLINE( 778)						 ::de::polygonal::_Printf::FormatDataType type = ::de::polygonal::Printf_obj::dataTypeMap->get(c1).StaticCast<  ::de::polygonal::_Printf::FormatDataType >();
HXLINE( 780)						if (hx::IsNull( type )) {
HXLINE( 781)							token = ::de::polygonal::_Printf::FormatToken_obj::Unknown(::String::fromCharCode(c1),i);
            						}
            						else {
HXLINE( 783)							token = ::de::polygonal::_Printf::FormatToken_obj::Tag(type,params);
            						}
            					}
HXLINE( 787)					tokens->push(token);
            				}
            			}
            			else {
HXLINE( 791)				if (hx::IsNull( lastStr->charBuf )) {
HXLINE( 791)					lastStr->charBuf = ::Array_obj< char >::__new();
            				}
HXDLIN( 791)				lastStr->charBuf->push(c1);
            			}
            		}
HXLINE( 794)		if ((lastStr->toString().length > (int)0)) {
HXLINE( 795)			tokens->push(::de::polygonal::_Printf::FormatToken_obj::BareString(lastStr->toString()));
            		}
HXLINE( 796)		return tokens;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,tokenize,return )

::String Printf_obj::formatBinary(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_800_formatBinary)
HXLINE( 801)		::String output = HX_("",00,00,00,00);
HXLINE( 802)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 803)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 804)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 806)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 806)			precision = (int)1;
            		}
HXLINE( 808)		if ((value != (int)0)) {
HXLINE( 810)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 811)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 814)			int i = value;
HXLINE( 815)			while(true){
HXLINE( 817)				::String output1;
HXDLIN( 817)				if ((((int)i & (int)(int)1) > (int)0)) {
HXLINE( 817)					output1 = HX_("1",31,00,00,00);
            				}
            				else {
HXLINE( 817)					output1 = HX_("0",30,00,00,00);
            				}
HXDLIN( 817)				output = (output1 + output);
HXLINE( 818)				i = hx::UShr(i,(int)1);
HXLINE( 815)				if (!((i > (int)0))) {
HXLINE( 815)					goto _hx_goto_12;
            				}
            			}
            			_hx_goto_12:;
HXLINE( 822)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 824)				if (hx::IsGreater( precision,output.length )) {
HXLINE( 825)					output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            				}
HXLINE( 827)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 827)					output = (HX_("b",62,00,00,00) + output);
            				}
            			}
            		}
HXLINE( 832)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 833)			if (hx::IsGreater( width,output.length )) {
HXLINE( 833)				return ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 833)				return output;
            			}
            		}
            		else {
HXLINE( 835)			if (hx::IsGreater( width,output.length )) {
HXLINE( 835)				::String _hx_tmp;
HXDLIN( 835)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 835)					_hx_tmp = HX_("0",30,00,00,00);
            				}
            				else {
HXLINE( 835)					_hx_tmp = HX_(" ",20,00,00,00);
            				}
HXDLIN( 835)				return ::de::polygonal::Printf_obj::lpad(output,_hx_tmp,width);
            			}
            			else {
HXLINE( 835)				return output;
            			}
            		}
HXLINE( 832)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatBinary,return )

::String Printf_obj::formatOctal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_839_formatOctal)
HXLINE( 840)		::String output = HX_("",00,00,00,00);
HXLINE( 841)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 842)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 843)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 845)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 845)			precision = (int)1;
            		}
HXLINE( 847)		if ((value != (int)0)) {
HXLINE( 849)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 849)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 851)			output = ::de::polygonal::Printf_obj::toOct(value);
HXLINE( 853)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 853)				output = (HX_("0",30,00,00,00) + output);
            			}
HXLINE( 855)			bool _hx_tmp;
HXDLIN( 855)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 855)				_hx_tmp = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 855)				_hx_tmp = false;
            			}
HXDLIN( 855)			if (_hx_tmp) {
HXLINE( 856)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
            		}
HXLINE( 860)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 861)			if (hx::IsGreater( width,output.length )) {
HXLINE( 861)				return ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 861)				return output;
            			}
            		}
            		else {
HXLINE( 863)			if (hx::IsGreater( width,output.length )) {
HXLINE( 863)				::String _hx_tmp1;
HXDLIN( 863)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 863)					_hx_tmp1 = HX_("0",30,00,00,00);
            				}
            				else {
HXLINE( 863)					_hx_tmp1 = HX_(" ",20,00,00,00);
            				}
HXDLIN( 863)				return ::de::polygonal::Printf_obj::lpad(output,_hx_tmp1,width);
            			}
            			else {
HXLINE( 863)				return output;
            			}
            		}
HXLINE( 860)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatOctal,return )

::String Printf_obj::formatHexadecimal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_867_formatHexadecimal)
HXLINE( 868)		::String output = HX_("",00,00,00,00);
HXLINE( 869)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 870)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 871)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 873)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 873)			precision = (int)1;
            		}
HXLINE( 875)		if ((value != (int)0)) {
HXLINE( 877)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 878)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 880)			int x = value;
HXDLIN( 880)			::String s = HX_("",00,00,00,00);
HXDLIN( 880)			::String hexChars = HX_("0123456789ABCDEF",68,2a,58,a2);
HXDLIN( 880)			while(true){
HXLINE( 880)				s = (hexChars.charAt(((int)x & (int)(int)15)) + s);
HXDLIN( 880)				x = hx::UShr(x,(int)4);
HXDLIN( 880)				if (!((x > (int)0))) {
HXLINE( 880)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
HXDLIN( 880)			output = s;
HXLINE( 882)			bool _hx_tmp;
HXDLIN( 882)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 882)				_hx_tmp = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 882)				_hx_tmp = false;
            			}
HXDLIN( 882)			if (_hx_tmp) {
HXLINE( 883)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
HXLINE( 885)			bool _hx_tmp1;
HXDLIN( 885)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 885)				_hx_tmp1 = (value != (int)0);
            			}
            			else {
HXLINE( 885)				_hx_tmp1 = false;
            			}
HXDLIN( 885)			if (_hx_tmp1) {
HXLINE( 886)				output = (HX_("0x",48,2a,00,00) + output);
            			}
HXLINE( 888)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::UpperCase_dyn()))) != (int)0)) {
HXLINE( 888)				output = output.toUpperCase();
            			}
            			else {
HXLINE( 888)				output = output.toLowerCase();
            			}
            		}
HXLINE( 892)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE( 893)			if (hx::IsGreater( width,output.length )) {
HXLINE( 893)				return ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE( 893)				return output;
            			}
            		}
            		else {
HXLINE( 895)			if (hx::IsGreater( width,output.length )) {
HXLINE( 895)				::String _hx_tmp2;
HXDLIN( 895)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE( 895)					_hx_tmp2 = HX_("0",30,00,00,00);
            				}
            				else {
HXLINE( 895)					_hx_tmp2 = HX_(" ",20,00,00,00);
            				}
HXDLIN( 895)				return ::de::polygonal::Printf_obj::lpad(output,_hx_tmp2,width);
            			}
            			else {
HXLINE( 895)				return output;
            			}
            		}
HXLINE( 892)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatHexadecimal,return )

::String Printf_obj::formatUnsignedDecimal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_899_formatUnsignedDecimal)
HXLINE( 900)		::String output;
HXLINE( 901)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 903)		if ((value >= (int)0)) {
HXLINE( 904)			output = ::de::polygonal::Printf_obj::formatSignedDecimal(value,args);
            		}
            		else {
HXLINE( 907)			 cpp::Int64Struct x = _hx_int64_make((int)0,value);
HXLINE( 908)			output = _hx_int64_to_string(x);
HXLINE( 909)			bool _hx_tmp;
HXDLIN( 909)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE( 909)				_hx_tmp = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE( 909)				_hx_tmp = false;
            			}
HXDLIN( 909)			if (_hx_tmp) {
HXLINE( 910)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
HXLINE( 911)			output = ::de::polygonal::Printf_obj::padNumber(output,value,( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) ),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            		}
HXLINE( 914)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatUnsignedDecimal,return )

::String Printf_obj::formatNaturalFloat(Float value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_918_formatNaturalFloat)
HXLINE( 920)		args->__SetField(HX_("precision",3e,d5,c7,80),(int)0,hx::paccDynamic);
HXLINE( 922)		::String formatedFloat = ::de::polygonal::Printf_obj::formatNormalFloat(value,args);
HXLINE( 923)		::String formatedScientific = ::de::polygonal::Printf_obj::formatScientific(value,args);
HXLINE( 925)		int this1 = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN( 925)		if ((((int)this1 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE( 927)			if ((formatedFloat.indexOf(HX_(".",2e,00,00,00),null()) != (int)-1)) {
HXLINE( 929)				int pos = (formatedFloat.length - (int)1);
HXLINE( 930)				while((formatedFloat.cca(pos) == (int)48)){
HXLINE( 930)					pos = (pos - (int)1);
            				}
HXLINE( 931)				formatedFloat = formatedFloat.substr((int)0,pos);
            			}
            		}
HXLINE( 935)		if ((formatedFloat.length <= formatedScientific.length)) {
HXLINE( 935)			return formatedFloat;
            		}
            		else {
HXLINE( 935)			return formatedScientific;
            		}
HXDLIN( 935)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatNaturalFloat,return )

::String Printf_obj::formatScientific(Float value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_939_formatScientific)
HXLINE( 940)		::String output = HX_("",00,00,00,00);
HXLINE( 941)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 942)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 943)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE( 943)			precision = (int)6;
            		}
HXLINE( 945)		int sign;
HXDLIN( 945)		int exponent;
HXLINE( 947)		if ((value == (int)0)) {
HXLINE( 949)			sign = (int)0;
HXLINE( 950)			exponent = (int)0;
HXLINE( 951)			output = (output + HX_("0",30,00,00,00));
HXLINE( 952)			if (hx::IsGreater( precision,(int)0 )) {
HXLINE( 954)				output = (output + HX_(".",2e,00,00,00));
HXLINE( 955)				{
HXLINE( 955)					int _g1 = (int)0;
HXDLIN( 955)					int _g = precision;
HXDLIN( 955)					while((_g1 < _g)){
HXLINE( 955)						_g1 = (_g1 + (int)1);
HXDLIN( 955)						int i = (_g1 - (int)1);
HXDLIN( 955)						output = (output + HX_("0",30,00,00,00));
            					}
            				}
            			}
            		}
            		else {
HXLINE( 960)			if ((value > ((Float)0.))) {
HXLINE( 960)				sign = (int)1;
            			}
            			else {
HXLINE( 960)				if ((value < ((Float)0.))) {
HXLINE( 960)					sign = (int)-1;
            				}
            				else {
HXLINE( 960)					sign = (int)0;
            				}
            			}
HXLINE( 961)			value = ::Math_obj::abs(value);
HXLINE( 962)			exponent = ::Math_obj::floor(((Float)::Math_obj::log(value) / (Float)((Float)2.302585092994046)));
HXLINE( 963)			value = ((Float)value / (Float)::Math_obj::pow((int)10,exponent));
HXLINE( 964)			Float p = ::Math_obj::pow(((Float)0.1),precision);
HXLINE( 965)			int min = (int)-2147483647;
HXDLIN( 965)			Float t = ((Float)value / (Float)p);
HXDLIN( 965)			bool value1;
HXDLIN( 965)			if ((t < (int)2147483647)) {
HXLINE( 965)				value1 = (t > min);
            			}
            			else {
HXLINE( 965)				value1 = false;
            			}
HXDLIN( 965)			if (value1) {
HXLINE( 965)				value = (::Math_obj::round(t) * p);
            			}
            			else {
HXLINE( 965)				if ((t > (int)0)) {
HXLINE( 965)					t = (t + ((Float).5));
            				}
            				else {
HXLINE( 965)					if ((t < (int)0)) {
HXLINE( 965)						t = (t - ((Float).5));
            					}
            					else {
HXLINE( 965)						t = t;
            					}
            				}
HXDLIN( 965)				value = ((t - hx::Mod(t,(int)1)) * p);
            			}
            		}
HXLINE( 968)		::String output1;
HXDLIN( 968)		if ((sign < (int)0)) {
HXLINE( 968)			output1 = HX_("-",2d,00,00,00);
            		}
            		else {
HXLINE( 968)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0)) {
HXLINE( 968)				output1 = HX_("+",2b,00,00,00);
            			}
            			else {
HXLINE( 968)				output1 = HX_("",00,00,00,00);
            			}
            		}
HXDLIN( 968)		output = (output + output1);
HXLINE( 970)		if ((value != (int)0)) {
HXLINE( 971)			::String output2 = ::de::polygonal::Printf_obj::str(value);
HXDLIN( 971)			::String output3 = output2.substr((int)0,(precision + (int)2));
HXDLIN( 971)			output = (output + ::de::polygonal::Printf_obj::rpad(output3,HX_("0",30,00,00,00),(precision + (int)2)));
            		}
HXLINE( 972)		::String output4;
HXDLIN( 972)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::UpperCase_dyn()))) != (int)0)) {
HXLINE( 972)			output4 = HX_("E",45,00,00,00);
            		}
            		else {
HXLINE( 972)			output4 = HX_("e",65,00,00,00);
            		}
HXDLIN( 972)		output = (output + output4);
HXLINE( 973)		::String output5;
HXDLIN( 973)		if ((exponent >= (int)0)) {
HXLINE( 973)			output5 = HX_("+",2b,00,00,00);
            		}
            		else {
HXLINE( 973)			output5 = HX_("-",2d,00,00,00);
            		}
HXDLIN( 973)		output = (output + output5);
HXLINE( 975)		if ((exponent < (int)10)) {
HXLINE( 976)			output = (output + HX_("00",00,2a,00,00));
            		}
            		else {
HXLINE( 978)			if ((exponent < (int)100)) {
HXLINE( 979)				output = (output + HX_("0",30,00,00,00));
            			}
            		}
HXLINE( 981)		output = (output + ::de::polygonal::Printf_obj::str(::de::polygonal::Printf_obj::iabs(exponent)));
HXLINE( 982)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatScientific,return )

::String Printf_obj::formatSignedDecimal(int value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_986_formatSignedDecimal)
HXLINE( 987)		::String output;
HXLINE( 988)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE( 989)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE( 990)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 992)		bool _hx_tmp;
HXDLIN( 992)		if (hx::IsEq( precision,(int)0 )) {
HXLINE( 992)			_hx_tmp = (value == (int)0);
            		}
            		else {
HXLINE( 992)			_hx_tmp = false;
            		}
HXDLIN( 992)		if (_hx_tmp) {
HXLINE( 993)			output = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 996)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::LengthH_dyn()))) != (int)0)) {
HXLINE( 997)				value = ((int)value & (int)(int)65535);
            			}
HXLINE( 999)			output = ::de::polygonal::Printf_obj::str(::de::polygonal::Printf_obj::iabs(value));
HXLINE(1001)			bool _hx_tmp1;
HXDLIN(1001)			if (hx::IsGreater( precision,(int)1 )) {
HXLINE(1001)				_hx_tmp1 = hx::IsLess( output.length,precision );
            			}
            			else {
HXLINE(1001)				_hx_tmp1 = false;
            			}
HXDLIN(1001)			if (_hx_tmp1) {
HXLINE(1002)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),precision);
            			}
HXLINE(1004)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE(1005)				int output1;
HXDLIN(1005)				if ((value < (int)0)) {
HXLINE(1005)					output1 = (width - (int)1);
            				}
            				else {
HXLINE(1005)					output1 = width;
            				}
HXDLIN(1005)				output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),output1);
            			}
HXLINE(1007)			if ((value < (int)0)) {
HXLINE(1008)				output = (HX_("-",2d,00,00,00) + output);
            			}
            		}
HXLINE(1011)		if ((value >= (int)0)) {
HXLINE(1013)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0)) {
HXLINE(1014)				output = (HX_("+",2b,00,00,00) + output);
            			}
            			else {
HXLINE(1016)				if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn()))) != (int)0)) {
HXLINE(1017)					output = (HX_(" ",20,00,00,00) + output);
            				}
            			}
            		}
HXLINE(1020)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE(1021)			output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            		}
            		else {
HXLINE(1023)			output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            		}
HXLINE(1025)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatSignedDecimal,return )

::String Printf_obj::formatString(::String x, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1029_formatString)
HXLINE(1030)		::String output = x;
HXLINE(1031)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE(1032)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE(1034)		if (hx::IsGreater( precision,(int)0 )) {
HXLINE(1035)			output = x.substr((int)0,precision);
            		}
HXLINE(1037)		int k = output.length;
HXLINE(1038)		bool _hx_tmp;
HXDLIN(1038)		if (hx::IsGreater( width,(int)0 )) {
HXLINE(1038)			_hx_tmp = hx::IsLess( k,width );
            		}
            		else {
HXLINE(1038)			_hx_tmp = false;
            		}
HXDLIN(1038)		if (_hx_tmp) {
HXLINE(1040)			int this1 = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN(1040)			if ((((int)this1 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE(1041)				output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE(1043)				output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),width);
            			}
            		}
HXLINE(1046)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatString,return )

::String Printf_obj::formatNormalFloat(Float value, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1050_formatNormalFloat)
HXLINE(1051)		::String output;
HXLINE(1053)		int flags = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXLINE(1054)		 ::Dynamic precision = args->__Field(HX_("precision",3e,d5,c7,80),hx::paccDynamic);
HXLINE(1055)		 ::Dynamic width = args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE(1058)		if (hx::IsEq( precision,(int)-1 )) {
HXLINE(1058)			precision = (int)6;
            		}
HXLINE(1060)		if (hx::IsEq( precision,(int)0 )) {
HXLINE(1062)			output = ::de::polygonal::Printf_obj::str(::de::polygonal::Printf_obj::iabs(::Math_obj::round(value)));
HXLINE(1065)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Sharp_dyn()))) != (int)0)) {
HXLINE(1065)				output = (output + HX_(".",2e,00,00,00));
            			}
            		}
            		else {
HXLINE(1070)			Float y = ::Math_obj::pow(((Float).1),precision);
HXDLIN(1070)			int min = (int)-2147483647;
HXDLIN(1070)			Float t = ((Float)value / (Float)y);
HXDLIN(1070)			bool value1;
HXDLIN(1070)			if ((t < (int)2147483647)) {
HXLINE(1070)				value1 = (t > min);
            			}
            			else {
HXLINE(1070)				value1 = false;
            			}
HXDLIN(1070)			if (value1) {
HXLINE(1070)				value = (::Math_obj::round(t) * y);
            			}
            			else {
HXLINE(1070)				if ((t > (int)0)) {
HXLINE(1070)					t = (t + ((Float).5));
            				}
            				else {
HXLINE(1070)					if ((t < (int)0)) {
HXLINE(1070)						t = (t - ((Float).5));
            					}
            					else {
HXLINE(1070)						t = t;
            					}
            				}
HXDLIN(1070)				value = ((t - hx::Mod(t,(int)1)) * y);
            			}
HXLINE(1071)			 ::Dynamic decimalPlaces = precision;
HXLINE(1072)			if (::Math_obj::isNaN(value)) {
HXLINE(1073)				output = HX_("NaN",9b,84,3b,00);
            			}
            			else {
HXLINE(1076)				int t1 = ::Std_obj::_hx_int(::Math_obj::pow((int)10,decimalPlaces));
HXLINE(1077)				output = ::de::polygonal::Printf_obj::str(((Float)::Std_obj::_hx_int((value * t1)) / (Float)t1));
HXLINE(1078)				int i = output.indexOf(HX_(".",2e,00,00,00),null());
HXLINE(1079)				if ((i != (int)-1)) {
HXLINE(1081)					int _g1 = output.substr((i + (int)1),null()).length;
HXDLIN(1081)					int _g = decimalPlaces;
HXDLIN(1081)					while((_g1 < _g)){
HXLINE(1081)						_g1 = (_g1 + (int)1);
HXDLIN(1081)						int i1 = (_g1 - (int)1);
HXLINE(1082)						output = (output + HX_("0",30,00,00,00));
            					}
            				}
            				else {
HXLINE(1086)					output = (output + HX_(".",2e,00,00,00));
HXLINE(1087)					{
HXLINE(1087)						int _g11 = (int)0;
HXDLIN(1087)						int _g2 = decimalPlaces;
HXDLIN(1087)						while((_g11 < _g2)){
HXLINE(1087)							_g11 = (_g11 + (int)1);
HXDLIN(1087)							int i2 = (_g11 - (int)1);
HXLINE(1088)							output = (output + HX_("0",30,00,00,00));
            						}
            					}
            				}
            			}
            		}
HXLINE(1093)		bool _hx_tmp;
HXDLIN(1093)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Plus_dyn()))) != (int)0)) {
HXLINE(1093)			_hx_tmp = (value >= (int)0);
            		}
            		else {
HXLINE(1093)			_hx_tmp = false;
            		}
HXDLIN(1093)		if (_hx_tmp) {
HXLINE(1094)			output = (HX_("+",2b,00,00,00) + output);
            		}
            		else {
HXLINE(1096)			bool _hx_tmp1;
HXDLIN(1096)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Space_dyn()))) != (int)0)) {
HXLINE(1096)				_hx_tmp1 = (value >= (int)0);
            			}
            			else {
HXLINE(1096)				_hx_tmp1 = false;
            			}
HXDLIN(1096)			if (_hx_tmp1) {
HXLINE(1097)				output = (HX_(" ",20,00,00,00) + output);
            			}
            		}
HXLINE(1099)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE(1100)			int output1;
HXDLIN(1100)			if ((value < (int)0)) {
HXLINE(1100)				output1 = (width - (int)1);
            			}
            			else {
HXLINE(1100)				output1 = width;
            			}
HXDLIN(1100)			output = ::de::polygonal::Printf_obj::lpad(output,HX_("0",30,00,00,00),output1);
            		}
HXLINE(1102)		if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE(1103)			output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),width);
            		}
            		else {
HXLINE(1105)			output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),width);
            		}
HXLINE(1107)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatNormalFloat,return )

::String Printf_obj::formatCharacter(int x, ::Dynamic args){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1111_formatCharacter)
HXLINE(1112)		::String output = ::String::fromCharCode(x);
HXLINE(1113)		if (hx::IsGreater( args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic),(int)1 )) {
HXLINE(1116)			int this1 = ( (int)(args->__Field(HX_("flags",47,2b,8c,02),hx::paccDynamic)) );
HXDLIN(1116)			if ((((int)this1 & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE(1117)				output = ::de::polygonal::Printf_obj::rpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            			}
            			else {
HXLINE(1119)				output = ::de::polygonal::Printf_obj::lpad(output,HX_(" ",20,00,00,00),( (int)(args->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic)) ));
            			}
            		}
HXLINE(1122)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,formatCharacter,return )

::String Printf_obj::padNumber(::String x,Float n,int flags,int width){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1126_padNumber)
HXLINE(1127)		int k = x.length;
HXLINE(1128)		bool _hx_tmp;
HXDLIN(1128)		if ((width > (int)0)) {
HXLINE(1128)			_hx_tmp = (k < width);
            		}
            		else {
HXLINE(1128)			_hx_tmp = false;
            		}
HXDLIN(1128)		if (_hx_tmp) {
HXLINE(1131)			if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Minus_dyn()))) != (int)0)) {
HXLINE(1132)				x = ::de::polygonal::Printf_obj::rpad(x,HX_(" ",20,00,00,00),width);
            			}
            			else {
HXLINE(1135)				if ((n >= (int)0)) {
HXLINE(1136)					::String x1;
HXDLIN(1136)					if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE(1136)						x1 = HX_("0",30,00,00,00);
            					}
            					else {
HXLINE(1136)						x1 = HX_(" ",20,00,00,00);
            					}
HXDLIN(1136)					x = ::de::polygonal::Printf_obj::lpad(x,x1,width);
            				}
            				else {
HXLINE(1139)					if ((((int)flags & (int)((int)(int)1 << (int)_hx_getEnumValueIndex(::de::polygonal::_Printf::FormatFlags_obj::Zero_dyn()))) != (int)0)) {
HXLINE(1142)						x = (HX_("-",2d,00,00,00) + ::de::polygonal::Printf_obj::lpad(x.substr((int)1,null()),HX_("0",30,00,00,00),width));
            					}
            					else {
HXLINE(1145)						x = ::de::polygonal::Printf_obj::lpad(x,HX_(" ",20,00,00,00),width);
            					}
            				}
            			}
            		}
HXLINE(1150)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Printf_obj,padNumber,return )

::String Printf_obj::lpad(::String s,::String c,int l){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1154_lpad)
HXLINE(1155)		if ((c.length <= (int)0)) {
HXLINE(1155)			HX_STACK_DO_THROW(HX_("c.length <= 0",c0,e7,94,ad));
            		}
HXLINE(1156)		while((s.length < l)){
HXLINE(1156)			s = (c + s);
            		}
HXLINE(1157)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Printf_obj,lpad,return )

::String Printf_obj::rpad(::String s,::String c,int l){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1161_rpad)
HXLINE(1162)		if ((c.length <= (int)0)) {
HXLINE(1162)			HX_STACK_DO_THROW(HX_("c.length <= 0",c0,e7,94,ad));
            		}
HXLINE(1163)		while((s.length < l)){
HXLINE(1163)			s = (s + c);
            		}
HXLINE(1164)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Printf_obj,rpad,return )

::String Printf_obj::toHex(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1168_toHex)
HXLINE(1174)		::String s = HX_("",00,00,00,00);
HXLINE(1175)		::String hexChars = HX_("0123456789ABCDEF",68,2a,58,a2);
HXLINE(1176)		while(true){
HXLINE(1178)			s = (hexChars.charAt(((int)x & (int)(int)15)) + s);
HXLINE(1179)			x = hx::UShr(x,(int)4);
HXLINE(1176)			if (!((x > (int)0))) {
HXLINE(1176)				goto _hx_goto_33;
            			}
            		}
            		_hx_goto_33:;
HXLINE(1183)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,toHex,return )

::String Printf_obj::toOct(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1187_toOct)
HXLINE(1188)		::String s = HX_("",00,00,00,00);
HXLINE(1189)		int t = x;
HXLINE(1190)		while(true){
HXLINE(1192)			s = (((int)t & (int)(int)7) + s);
HXLINE(1193)			t = hx::UShr(t,(int)3);
HXLINE(1190)			if (!((t > (int)0))) {
HXLINE(1190)				goto _hx_goto_35;
            			}
            		}
            		_hx_goto_35:;
HXLINE(1196)		return s;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,toOct,return )

int Printf_obj::iabs(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1199_iabs)
HXDLIN(1199)		return ::Std_obj::_hx_int(::Math_obj::abs(x));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,iabs,return )

::String Printf_obj::str( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1201_str)
HXDLIN(1201)		return ::Std_obj::string(x);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,str,return )

int Printf_obj::codeAt(::String x,int i){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1203_codeAt)
HXDLIN(1203)		return x.cca(i);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,codeAt,return )

bool Printf_obj::isDigit(int x){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1205_isDigit)
HXDLIN(1205)		if ((x >= (int)48)) {
HXDLIN(1205)			return (x <= (int)57);
            		}
            		else {
HXDLIN(1205)			return false;
            		}
HXDLIN(1205)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Printf_obj,isDigit,return )

Float Printf_obj::roundTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_1208_roundTo)
HXLINE(1214)		int min = (int)-2147483647;
HXLINE(1215)		Float t = ((Float)x / (Float)y);
HXLINE(1216)		bool _hx_tmp;
HXDLIN(1216)		if ((t < (int)2147483647)) {
HXLINE(1216)			_hx_tmp = (t > min);
            		}
            		else {
HXLINE(1216)			_hx_tmp = false;
            		}
HXDLIN(1216)		if (_hx_tmp) {
HXLINE(1217)			return (::Math_obj::round(t) * y);
            		}
            		else {
HXLINE(1220)			if ((t > (int)0)) {
HXLINE(1220)				t = (t + ((Float).5));
            			}
            			else {
HXLINE(1220)				if ((t < (int)0)) {
HXLINE(1220)					t = (t - ((Float).5));
            				}
            				else {
HXLINE(1220)					t = t;
            				}
            			}
HXLINE(1221)			return ((t - hx::Mod(t,(int)1)) * y);
            		}
HXLINE(1216)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Printf_obj,roundTo,return )


Printf_obj::Printf_obj()
{
}

bool Printf_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { outValue = str_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lpad") ) { outValue = lpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iabs") ) { outValue = iabs_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toHex") ) { outValue = toHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toOct") ) { outValue = toOct_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { outValue = format_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"codeAt") ) { outValue = codeAt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isDigit") ) { outValue = isDigit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"roundTo") ) { outValue = roundTo_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tokenize") ) { outValue = tokenize_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"padNumber") ) { outValue = padNumber_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dataTypeMap") ) { outValue = ( dataTypeMap ); return true; }
		if (HX_FIELD_EQ(inName,"formatOctal") ) { outValue = formatOctal_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_initialized") ) { outValue = ( _initialized ); return true; }
		if (HX_FIELD_EQ(inName,"formatBinary") ) { outValue = formatBinary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatString") ) { outValue = formatString_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"makeDataTypeMap") ) { outValue = makeDataTypeMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatCharacter") ) { outValue = formatCharacter_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"formatScientific") ) { outValue = formatScientific_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"formatIntFuncHash") ) { outValue = ( formatIntFuncHash ); return true; }
		if (HX_FIELD_EQ(inName,"formatHexadecimal") ) { outValue = formatHexadecimal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatNormalFloat") ) { outValue = formatNormalFloat_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"formatNaturalFloat") ) { outValue = formatNaturalFloat_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"formatFloatFuncHash") ) { outValue = ( formatFloatFuncHash ); return true; }
		if (HX_FIELD_EQ(inName,"formatSignedDecimal") ) { outValue = formatSignedDecimal_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"formatStringFuncHash") ) { outValue = ( formatStringFuncHash ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"formatUnsignedDecimal") ) { outValue = formatUnsignedDecimal_dyn(); return true; }
	}
	return false;
}

bool Printf_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"dataTypeMap") ) { dataTypeMap=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_initialized") ) { _initialized=ioValue.Cast< bool >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"formatIntFuncHash") ) { formatIntFuncHash=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"formatFloatFuncHash") ) { formatFloatFuncHash=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"formatStringFuncHash") ) { formatStringFuncHash=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Printf_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Printf_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::dataTypeMap,HX_HCSTRING("dataTypeMap","\xf8","\x0a","\xb2","\x3a")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::formatIntFuncHash,HX_HCSTRING("formatIntFuncHash","\x4a","\xff","\x46","\xc5")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::formatFloatFuncHash,HX_HCSTRING("formatFloatFuncHash","\x37","\x01","\xda","\xb8")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Printf_obj::formatStringFuncHash,HX_HCSTRING("formatStringFuncHash","\xba","\x8c","\x47","\x16")},
	{hx::fsBool,(void *) &Printf_obj::_initialized,HX_HCSTRING("_initialized","\x15","\xa3","\x19","\x9d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Printf_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Printf_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Printf_obj::dataTypeMap,"dataTypeMap");
	HX_MARK_MEMBER_NAME(Printf_obj::formatIntFuncHash,"formatIntFuncHash");
	HX_MARK_MEMBER_NAME(Printf_obj::formatFloatFuncHash,"formatFloatFuncHash");
	HX_MARK_MEMBER_NAME(Printf_obj::formatStringFuncHash,"formatStringFuncHash");
	HX_MARK_MEMBER_NAME(Printf_obj::_initialized,"_initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Printf_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Printf_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Printf_obj::dataTypeMap,"dataTypeMap");
	HX_VISIT_MEMBER_NAME(Printf_obj::formatIntFuncHash,"formatIntFuncHash");
	HX_VISIT_MEMBER_NAME(Printf_obj::formatFloatFuncHash,"formatFloatFuncHash");
	HX_VISIT_MEMBER_NAME(Printf_obj::formatStringFuncHash,"formatStringFuncHash");
	HX_VISIT_MEMBER_NAME(Printf_obj::_initialized,"_initialized");
};

#endif

hx::Class Printf_obj::__mClass;

static ::String Printf_obj_sStaticFields[] = {
	HX_HCSTRING("dataTypeMap","\xf8","\x0a","\xb2","\x3a"),
	HX_HCSTRING("formatIntFuncHash","\x4a","\xff","\x46","\xc5"),
	HX_HCSTRING("formatFloatFuncHash","\x37","\x01","\xda","\xb8"),
	HX_HCSTRING("formatStringFuncHash","\xba","\x8c","\x47","\x16"),
	HX_HCSTRING("_initialized","\x15","\xa3","\x19","\x9d"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("makeDataTypeMap","\xaa","\xf3","\xae","\x69"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("tokenize","\xfb","\xf5","\x57","\x2b"),
	HX_HCSTRING("formatBinary","\x98","\x82","\x20","\x2a"),
	HX_HCSTRING("formatOctal","\x14","\x37","\x5c","\xe4"),
	HX_HCSTRING("formatHexadecimal","\x34","\xfe","\x97","\x8f"),
	HX_HCSTRING("formatUnsignedDecimal","\xa5","\xe2","\x19","\x4e"),
	HX_HCSTRING("formatNaturalFloat","\xca","\x5c","\x19","\x02"),
	HX_HCSTRING("formatScientific","\xc0","\x9f","\x5b","\x7d"),
	HX_HCSTRING("formatSignedDecimal","\x5e","\x28","\x02","\x1a"),
	HX_HCSTRING("formatString","\x68","\xef","\x44","\x4e"),
	HX_HCSTRING("formatNormalFloat","\xfe","\x8b","\x89","\x73"),
	HX_HCSTRING("formatCharacter","\x72","\x0d","\x4c","\xad"),
	HX_HCSTRING("padNumber","\x7c","\x8c","\x2c","\x0a"),
	HX_HCSTRING("lpad","\x67","\x5c","\xb8","\x47"),
	HX_HCSTRING("rpad","\x21","\xa4","\xaf","\x4b"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("toOct","\x25","\x42","\x16","\x14"),
	HX_HCSTRING("iabs","\xa9","\x57","\xb1","\x45"),
	HX_HCSTRING("str","\xb1","\xa8","\x57","\x00"),
	HX_HCSTRING("codeAt","\x80","\x4f","\x35","\xc1"),
	HX_HCSTRING("isDigit","\x63","\x91","\x4d","\x76"),
	HX_HCSTRING("roundTo","\x69","\x71","\x0f","\x8d"),
	::String(null())
};

void Printf_obj::__register()
{
	hx::Object *dummy = new Printf_obj;
	Printf_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("de.polygonal.Printf","\xaf","\x4a","\xa7","\xfb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Printf_obj::__GetStatic;
	__mClass->mSetStaticField = &Printf_obj::__SetStatic;
	__mClass->mMarkFunc = Printf_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Printf_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Printf_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Printf_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Printf_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Printf_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Printf_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fd0f0255b116184c_59_boot)
HXDLIN(  59)		_initialized = false;
            	}
}

} // end namespace de
} // end namespace polygonal
