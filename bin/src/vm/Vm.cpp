// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_de_polygonal_Printf
#include <de/polygonal/Printf.h>
#endif
#ifndef INCLUDED_vm_Vm
#include <vm/Vm.h>
#endif
#ifndef INCLUDED_vm_bytecode_Instruction
#include <vm/bytecode/Instruction.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_12_new,"vm.Vm","new",0x52b63820,"vm.Vm.new","vm/Vm.hx",12,0xa94f87af)
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_43_exec,"vm.Vm","exec",0x06d653d1,"vm.Vm.exec","vm/Vm.hx",43,0xa94f87af)
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_49_cpu,"vm.Vm","cpu",0x52ade8e8,"vm.Vm.cpu","vm/Vm.hx",49,0xa94f87af)
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_114_disInstr,"vm.Vm","disInstr",0x0367c1fe,"vm.Vm.disInstr","vm/Vm.hx",114,0xa94f87af)
static const ::String _hx_array_data_3977e82e_6[] = {
	HX_("stack=[",c6,fe,29,2b),
};
static const ::String _hx_array_data_3977e82e_7[] = {
	HX_(" ",20,00,00,00),
};
static const ::String _hx_array_data_3977e82e_8[] = {
	HX_(" ]",3d,1c,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_132_stackString,"vm.Vm","stackString",0x9390d1f9,"vm.Vm.stackString","vm/Vm.hx",132,0xa94f87af)
static const ::String _hx_array_data_3977e82e_12[] = {
	HX_(", ",74,26,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_161_dumpDataMemory,"vm.Vm","dumpDataMemory",0x6d1c4b5f,"vm.Vm.dumpDataMemory","vm/Vm.hx",161,0xa94f87af)
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_13_boot,"vm.Vm","boot",0x04d3e472,"vm.Vm.boot","vm/Vm.hx",13,0xa94f87af)
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_15_boot,"vm.Vm","boot",0x04d3e472,"vm.Vm.boot","vm/Vm.hx",15,0xa94f87af)
HX_LOCAL_STACK_FRAME(_hx_pos_56e2b84bf5f8ba6d_16_boot,"vm.Vm","boot",0x04d3e472,"vm.Vm.boot","vm/Vm.hx",16,0xa94f87af)
namespace vm{

void Vm_obj::__construct(::Array< int > code,int startip,int nglobals){
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_12_new)
HXLINE(  31)		this->trace = false;
HXLINE(  23)		this->startip = (int)0;
HXLINE(  20)		this->sp = (int)-1;
HXLINE(  35)		this->code = code;
HXLINE(  36)		this->startip = startip;
HXLINE(  37)		::Array< int > this1 = ::Array_obj< int >::__new(nglobals);
HXDLIN(  37)		this->globals = this1;
HXLINE(  38)		::Array< int > this2 = ::Array_obj< int >::__new(::vm::Vm_obj::DEFAULT_STACK_SIZE);
HXDLIN(  38)		this->stack = this2;
            	}

Dynamic Vm_obj::__CreateEmpty() { return new Vm_obj; }

void *Vm_obj::_hx_vtable = 0;

Dynamic Vm_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vm_obj > _hx_result = new Vm_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Vm_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x174c7cce;
}

void Vm_obj::exec(){
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_43_exec)
HXLINE(  44)		this->ip = this->startip;
HXLINE(  45)		this->cpu();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vm_obj,exec,(void))

void Vm_obj::cpu(){
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_49_cpu)
HXLINE(  50)		int opcode = this->code->__get(this->ip);
HXLINE(  51)		int a;
HXDLIN(  51)		int b;
HXDLIN(  51)		int addr;
HXDLIN(  51)		 ::Dynamic regnum;
HXLINE(  53)		while(true){
HXLINE(  53)			bool _hx_tmp;
HXDLIN(  53)			if ((opcode != (int)16)) {
HXLINE(  53)				_hx_tmp = (this->ip < this->code->length);
            			}
            			else {
HXLINE(  53)				_hx_tmp = false;
            			}
HXDLIN(  53)			if (!(_hx_tmp)) {
HXLINE(  53)				goto _hx_goto_2;
            			}
HXLINE(  54)			if (this->trace) {
HXLINE(  54)				::Sys_obj::println(::de::polygonal::Printf_obj::format(HX_("%-35s",29,f2,b8,6b),::cpp::VirtualArray_obj::__new(1)->init(0,this->disInstr())));
            			}
HXLINE(  56)			this->ip++;
HXLINE(  58)			switch((int)(opcode)){
            				case (int)1: {
HXLINE(  60)					b = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  61)					a = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  62)					{
HXLINE(  62)						 ::Dynamic this1 = this->stack->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN(  62)						this1(++this->sp,(a + b));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(  64)					b = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  65)					a = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  66)					{
HXLINE(  66)						 ::Dynamic this2 = this->stack->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN(  66)						this2(++this->sp,(a - b));
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(  68)					b = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  69)					a = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  70)					{
HXLINE(  70)						 ::Dynamic this3 = this->stack->__Field(HX_("__unsafe_set",e9,ea,a4,60),hx::paccDynamic);
HXDLIN(  70)						this3(++this->sp,(a * b));
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(  72)					b = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  73)					a = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  74)					{
HXLINE(  74)						int index = ++this->sp;
HXDLIN(  74)						int val;
HXDLIN(  74)						if ((a < b)) {
HXLINE(  74)							val = ::vm::Vm_obj::TRUE;
            						}
            						else {
HXLINE(  74)							val = ::vm::Vm_obj::FALSE;
            						}
HXDLIN(  74)						this->stack->__unsafe_set(index,val);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(  76)					b = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  77)					a = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXLINE(  78)					{
HXLINE(  78)						int index1 = ++this->sp;
HXDLIN(  78)						int val1;
HXDLIN(  78)						if ((a == b)) {
HXLINE(  78)							val1 = ::vm::Vm_obj::TRUE;
            						}
            						else {
HXLINE(  78)							val1 = ::vm::Vm_obj::FALSE;
            						}
HXDLIN(  78)						this->stack->__unsafe_set(index1,val1);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(  80)					::Array< int > _hx_tmp1 = this->code;
HXDLIN(  80)					this->ip = _hx_tmp1->__get(this->ip++);
            				}
            				break;
            				case (int)7: {
HXLINE(  82)					::Array< int > addr1 = this->code;
HXDLIN(  82)					addr = addr1->__get(this->ip++);
HXLINE(  83)					int _hx_tmp2 = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXDLIN(  83)					if ((_hx_tmp2 == ::vm::Vm_obj::TRUE)) {
HXLINE(  83)						this->ip = addr;
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(  85)					::Array< int > addr2 = this->code;
HXDLIN(  85)					addr = addr2->__get(this->ip++);
HXLINE(  86)					int _hx_tmp3 = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXDLIN(  86)					if ((_hx_tmp3 == ::vm::Vm_obj::FALSE)) {
HXLINE(  86)						this->ip = addr;
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(  88)					::Array< int > val2 = this->code;
HXDLIN(  88)					int val3 = val2->__get(this->ip++);
HXDLIN(  88)					this->stack->__unsafe_set(++this->sp,val3);
            				}
            				break;
            				case (int)11: {
HXLINE(  90)					::Array< int > addr3 = this->code;
HXDLIN(  90)					addr = addr3->__get(this->ip++);
HXLINE(  91)					{
HXLINE(  91)						::Array< int > this4 = this->stack;
HXDLIN(  91)						int index2 = ++this->sp;
HXDLIN(  91)						int val4 = ( (int)(_hx_array_unsafe_get(this->globals,addr)) );
HXDLIN(  91)						this4->__unsafe_set(index2,val4);
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(  93)					::Array< int > addr4 = this->code;
HXDLIN(  93)					addr = addr4->__get(this->ip++);
HXLINE(  94)					{
HXLINE(  94)						::Array< int > this5 = this->globals;
HXDLIN(  94)						int val5 = ( (int)(_hx_array_unsafe_get(this->stack,this->sp--)) );
HXDLIN(  94)						this5->__unsafe_set(addr,val5);
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(  96)					::Sys_obj::println(_hx_array_unsafe_get(this->stack,this->sp--));
            				}
            				break;
            				case (int)15: {
HXLINE(  98)					--this->sp;
            				}
            				break;
            				default:{
HXLINE( 100)					HX_STACK_DO_THROW((((HX_("invalid opcode: ",3d,67,6c,b3) + opcode) + HX_(" at ip=",e9,04,3f,db)) + (this->ip - (int)1)));
            				}
            			}
HXLINE( 103)			if (this->trace) {
HXLINE( 103)				::Sys_obj::println(this->stackString());
            			}
HXLINE( 104)			opcode = this->code->__get(this->ip);
            		}
            		_hx_goto_2:;
HXLINE( 107)		if (this->trace) {
HXLINE( 107)			::Sys_obj::println(::de::polygonal::Printf_obj::format(HX_("%-35s",29,f2,b8,6b),::cpp::VirtualArray_obj::__new(1)->init(0,this->disInstr())));
            		}
HXLINE( 108)		if (this->trace) {
HXLINE( 108)			::Sys_obj::println(this->stackString());
            		}
HXLINE( 109)		if (this->trace) {
HXLINE( 109)			this->dumpDataMemory();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vm_obj,cpu,(void))

::String Vm_obj::disInstr(){
            	HX_GC_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_114_disInstr)
HXLINE( 115)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 117)		{
HXLINE( 117)			if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 117)				buf->flush();
            			}
HXDLIN( 117)			if (hx::IsNull( buf->b )) {
HXLINE( 117)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_3977e82e_6,1);
            			}
            			else {
HXLINE( 117)				buf->b->push(HX_("stack=[",c6,fe,29,2b));
            			}
            		}
HXLINE( 119)		int i = (int)0;
HXLINE( 121)		while((i <= this->sp)){
HXLINE( 122)			int o = ( (int)(_hx_array_unsafe_get(this->stack,i)) );
HXLINE( 123)			{
HXLINE( 123)				if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 123)					buf->flush();
            				}
HXDLIN( 123)				if (hx::IsNull( buf->b )) {
HXLINE( 123)					buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_3977e82e_7,1);
            				}
            				else {
HXLINE( 123)					buf->b->push(HX_(" ",20,00,00,00));
            				}
            			}
HXLINE( 124)			{
HXLINE( 124)				if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 124)					buf->flush();
            				}
HXDLIN( 124)				if (hx::IsNull( buf->b )) {
HXLINE( 124)					buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(o));
            				}
            				else {
HXLINE( 124)					::Array< ::String > buf1 = buf->b;
HXDLIN( 124)					buf1->push(::Std_obj::string(o));
            				}
            			}
HXLINE( 125)			i = (i + (int)1);
            		}
HXLINE( 128)		{
HXLINE( 128)			if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 128)				buf->flush();
            			}
HXDLIN( 128)			if (hx::IsNull( buf->b )) {
HXLINE( 128)				buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_3977e82e_8,1);
            			}
            			else {
HXLINE( 128)				buf->b->push(HX_(" ]",3d,1c,00,00));
            			}
            		}
HXLINE( 129)		return buf->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vm_obj,disInstr,return )

::String Vm_obj::stackString(){
            	HX_GC_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_132_stackString)
HXLINE( 133)		int opcode = this->code->__get(this->ip);
HXLINE( 134)		::String opName = ::vm::bytecode::Instruction_obj::instructions->__get(opcode).StaticCast<  ::vm::bytecode::Instruction >()->name;
HXLINE( 136)		 ::StringBuf buf =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 138)		{
HXLINE( 138)			::String x = ::de::polygonal::Printf_obj::format(HX_("%04d:\t%-11s",c1,73,a4,4f),::cpp::VirtualArray_obj::__new(2)->init(0,this->ip)->init(1,opName));
HXDLIN( 138)			if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 138)				buf->flush();
            			}
HXDLIN( 138)			if (hx::IsNull( buf->b )) {
HXLINE( 138)				buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE( 138)				::Array< ::String > buf1 = buf->b;
HXDLIN( 138)				buf1->push(::Std_obj::string(x));
            			}
            		}
HXLINE( 140)		int nargs = ::vm::bytecode::Instruction_obj::instructions->__get(opcode).StaticCast<  ::vm::bytecode::Instruction >()->n;
HXLINE( 142)		if ((nargs > (int)0)) {
HXLINE( 143)			::Array< ::String > operands = ::Array_obj< ::String >::__new();
HXLINE( 144)			int k = (this->ip + (int)1);
HXLINE( 145)			while((k <= (this->ip + nargs))){
HXLINE( 146)				operands->push(::Std_obj::string(this->code->__get(k)));
HXLINE( 147)				k = (k + (int)1);
            			}
HXLINE( 150)			{
HXLINE( 150)				int _g1 = (int)0;
HXDLIN( 150)				int _g = operands->length;
HXDLIN( 150)				while((_g1 < _g)){
HXLINE( 150)					_g1 = (_g1 + (int)1);
HXDLIN( 150)					int i = (_g1 - (int)1);
HXLINE( 151)					::String s = operands->__get(i);
HXLINE( 152)					if ((i > (int)0)) {
HXLINE( 152)						if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 152)							buf->flush();
            						}
HXDLIN( 152)						if (hx::IsNull( buf->b )) {
HXLINE( 152)							buf->b = ::Array_obj< ::String >::fromData( _hx_array_data_3977e82e_12,1);
            						}
            						else {
HXLINE( 152)							buf->b->push(HX_(", ",74,26,00,00));
            						}
            					}
HXLINE( 153)					{
HXLINE( 153)						if (hx::IsNotNull( buf->charBuf )) {
HXLINE( 153)							buf->flush();
            						}
HXDLIN( 153)						if (hx::IsNull( buf->b )) {
HXLINE( 153)							buf->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(s));
            						}
            						else {
HXLINE( 153)							::Array< ::String > buf2 = buf->b;
HXDLIN( 153)							buf2->push(::Std_obj::string(s));
            						}
            					}
            				}
            			}
            		}
HXLINE( 157)		return buf->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vm_obj,stackString,return )

void Vm_obj::dumpDataMemory(){
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_161_dumpDataMemory)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vm_obj,dumpDataMemory,(void))

int Vm_obj::DEFAULT_STACK_SIZE;

int Vm_obj::FALSE;

int Vm_obj::TRUE;


hx::ObjectPtr< Vm_obj > Vm_obj::__new(::Array< int > code,int startip,int nglobals) {
	hx::ObjectPtr< Vm_obj > __this = new Vm_obj();
	__this->__construct(code,startip,nglobals);
	return __this;
}

hx::ObjectPtr< Vm_obj > Vm_obj::__alloc(hx::Ctx *_hx_ctx,::Array< int > code,int startip,int nglobals) {
	Vm_obj *__this = (Vm_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vm_obj), true, "vm.Vm"));
	*(void **)__this = Vm_obj::_hx_vtable;
	__this->__construct(code,startip,nglobals);
	return __this;
}

Vm_obj::Vm_obj()
{
}

void Vm_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Vm);
	HX_MARK_MEMBER_NAME(ip,"ip");
	HX_MARK_MEMBER_NAME(sp,"sp");
	HX_MARK_MEMBER_NAME(startip,"startip");
	HX_MARK_MEMBER_NAME(code,"code");
	HX_MARK_MEMBER_NAME(globals,"globals");
	HX_MARK_MEMBER_NAME(stack,"stack");
	HX_MARK_MEMBER_NAME(trace,"trace");
	HX_MARK_END_CLASS();
}

void Vm_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ip,"ip");
	HX_VISIT_MEMBER_NAME(sp,"sp");
	HX_VISIT_MEMBER_NAME(startip,"startip");
	HX_VISIT_MEMBER_NAME(code,"code");
	HX_VISIT_MEMBER_NAME(globals,"globals");
	HX_VISIT_MEMBER_NAME(stack,"stack");
	HX_VISIT_MEMBER_NAME(trace,"trace");
}

hx::Val Vm_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ip") ) { return hx::Val( ip ); }
		if (HX_FIELD_EQ(inName,"sp") ) { return hx::Val( sp ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cpu") ) { return hx::Val( cpu_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { return hx::Val( code ); }
		if (HX_FIELD_EQ(inName,"exec") ) { return hx::Val( exec_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { return hx::Val( stack ); }
		if (HX_FIELD_EQ(inName,"trace") ) { return hx::Val( trace ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"startip") ) { return hx::Val( startip ); }
		if (HX_FIELD_EQ(inName,"globals") ) { return hx::Val( globals ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"disInstr") ) { return hx::Val( disInstr_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"stackString") ) { return hx::Val( stackString_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dumpDataMemory") ) { return hx::Val( dumpDataMemory_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vm_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"TRUE") ) { outValue = ( TRUE ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FALSE") ) { outValue = ( FALSE ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"DEFAULT_STACK_SIZE") ) { outValue = ( DEFAULT_STACK_SIZE ); return true; }
	}
	return false;
}

hx::Val Vm_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ip") ) { ip=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sp") ) { sp=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"code") ) { code=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { stack=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trace") ) { trace=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"startip") ) { startip=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"globals") ) { globals=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Vm_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"TRUE") ) { TRUE=ioValue.Cast< int >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"FALSE") ) { FALSE=ioValue.Cast< int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"DEFAULT_STACK_SIZE") ) { DEFAULT_STACK_SIZE=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Vm_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ip","\xe7","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("sp","\x9d","\x64","\x00","\x00"));
	outFields->push(HX_HCSTRING("startip","\xc9","\x2c","\x1b","\x35"));
	outFields->push(HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"));
	outFields->push(HX_HCSTRING("globals","\xb0","\x05","\x39","\x14"));
	outFields->push(HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"));
	outFields->push(HX_HCSTRING("trace","\x85","\x8e","\x1f","\x16"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vm_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Vm_obj,ip),HX_HCSTRING("ip","\xe7","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Vm_obj,sp),HX_HCSTRING("sp","\x9d","\x64","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Vm_obj,startip),HX_HCSTRING("startip","\xc9","\x2c","\x1b","\x35")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Vm_obj,code),HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Vm_obj,globals),HX_HCSTRING("globals","\xb0","\x05","\x39","\x14")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Vm_obj,stack),HX_HCSTRING("stack","\x48","\x67","\x0b","\x84")},
	{hx::fsBool,(int)offsetof(Vm_obj,trace),HX_HCSTRING("trace","\x85","\x8e","\x1f","\x16")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Vm_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Vm_obj::DEFAULT_STACK_SIZE,HX_HCSTRING("DEFAULT_STACK_SIZE","\x96","\x86","\x8f","\x15")},
	{hx::fsInt,(void *) &Vm_obj::FALSE,HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79")},
	{hx::fsInt,(void *) &Vm_obj::TRUE,HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Vm_obj_sMemberFields[] = {
	HX_HCSTRING("ip","\xe7","\x5b","\x00","\x00"),
	HX_HCSTRING("sp","\x9d","\x64","\x00","\x00"),
	HX_HCSTRING("startip","\xc9","\x2c","\x1b","\x35"),
	HX_HCSTRING("code","\x2d","\xb1","\xc4","\x41"),
	HX_HCSTRING("globals","\xb0","\x05","\x39","\x14"),
	HX_HCSTRING("stack","\x48","\x67","\x0b","\x84"),
	HX_HCSTRING("trace","\x85","\x8e","\x1f","\x16"),
	HX_HCSTRING("exec","\x91","\xf3","\x1d","\x43"),
	HX_HCSTRING("cpu","\x28","\x81","\x4b","\x00"),
	HX_HCSTRING("disInstr","\xbe","\x41","\x5a","\xb2"),
	HX_HCSTRING("stackString","\x39","\xaa","\xe0","\xb8"),
	HX_HCSTRING("dumpDataMemory","\x1f","\x1b","\x91","\x33"),
	::String(null()) };

static void Vm_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vm_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Vm_obj::DEFAULT_STACK_SIZE,"DEFAULT_STACK_SIZE");
	HX_MARK_MEMBER_NAME(Vm_obj::FALSE,"FALSE");
	HX_MARK_MEMBER_NAME(Vm_obj::TRUE,"TRUE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vm_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vm_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Vm_obj::DEFAULT_STACK_SIZE,"DEFAULT_STACK_SIZE");
	HX_VISIT_MEMBER_NAME(Vm_obj::FALSE,"FALSE");
	HX_VISIT_MEMBER_NAME(Vm_obj::TRUE,"TRUE");
};

#endif

hx::Class Vm_obj::__mClass;

static ::String Vm_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_STACK_SIZE","\x96","\x86","\x8f","\x15"),
	HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79"),
	HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37"),
	::String(null())
};

void Vm_obj::__register()
{
	hx::Object *dummy = new Vm_obj;
	Vm_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("vm.Vm","\x2e","\xe8","\x77","\x39");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vm_obj::__GetStatic;
	__mClass->mSetStaticField = &Vm_obj::__SetStatic;
	__mClass->mMarkFunc = Vm_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vm_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vm_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vm_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vm_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vm_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vm_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Vm_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_13_boot)
HXDLIN(  13)		DEFAULT_STACK_SIZE = (int)1000;
            	}
{
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_15_boot)
HXDLIN(  15)		FALSE = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_56e2b84bf5f8ba6d_16_boot)
HXDLIN(  16)		TRUE = (int)1;
            	}
}

} // end namespace vm
