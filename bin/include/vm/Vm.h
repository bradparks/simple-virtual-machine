// Generated by Haxe 3.4.7
#ifndef INCLUDED_vm_Vm
#define INCLUDED_vm_Vm

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(vm,Vm)

namespace vm{


class HXCPP_CLASS_ATTRIBUTES Vm_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vm_obj OBJ_;
		Vm_obj();

	public:
		enum { _hx_ClassId = 0x174c7cce };

		void __construct(::Array< int > code,int startip,int nglobals);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="vm.Vm")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"vm.Vm"); }
		static hx::ObjectPtr< Vm_obj > __new(::Array< int > code,int startip,int nglobals);
		static hx::ObjectPtr< Vm_obj > __alloc(hx::Ctx *_hx_ctx,::Array< int > code,int startip,int nglobals);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vm_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Vm","\x57","\x4b","\x00","\x00"); }

		static void __boot();
		static int DEFAULT_STACK_SIZE;
		static int FALSE;
		static int TRUE;
		int ip;
		int sp;
		int startip;
		::Array< int > code;
		::Array< int > globals;
		::Array< int > stack;
		bool trace;
		void exec();
		::Dynamic exec_dyn();

		void cpu();
		::Dynamic cpu_dyn();

		::String disInstr();
		::Dynamic disInstr_dyn();

		::String stackString();
		::Dynamic stackString_dyn();

		void dumpDataMemory();
		::Dynamic dumpDataMemory_dyn();

};

} // end namespace vm

#endif /* INCLUDED_vm_Vm */ 
